// Generated by CoffeeScript 1.12.7
var Tree, randomChoice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

randomChoice = require('./helpers').randomChoice;

module.exports = Tree = (function() {
  function Tree(parent, key1, level1, children1) {
    this.parent = parent;
    this.key = key1;
    this.level = level1;
    this.children = children1 != null ? children1 : [];
    this.children_by_key = {};
  }

  Tree.prototype.addChild = function(child, level) {
    if (child.key == null) {
      child = new Tree(this, child, level);
    } else {
      child.parent = this;
    }
    this.children.push(child);
    this.children_by_key[child.key] = child;
    return child;
  };

  Tree.prototype.addSibling = function(sibling, level) {
    return this.parent.addChild(sibling, level);
  };

  Tree.prototype.toString = function(indent) {
    var child, i, ii, j, len, ref, ref1, ref2, s;
    if (indent == null) {
      indent = 0;
    }
    s = '\n';
    for (ii = i = 0, ref = indent * 4; 0 <= ref ? i < ref : i > ref; ii = 0 <= ref ? ++i : --i) {
      s += ' ';
    }
    s += '( ' + this.key;
    if ((ref1 = this.children) != null ? ref1.length : void 0) {
      s += ' ( ';
      ref2 = this.children;
      for (j = 0, len = ref2.length; j < len; j++) {
        child = ref2[j];
        s += child.toString(indent + 1);
      }
      s += ' )';
    }
    s += ' )';
    return s;
  };

  Tree.prototype.get = function(key) {
    return this.children_by_key[key];
  };

  Tree.prototype.prune = function(remove_keys) {
    var children;
    if (!(remove_keys != null ? remove_keys.length : void 0)) {
      return this;
    }
    children = this.children.filter(function(child) {
      var ref;
      return ref = child.key, indexOf.call(remove_keys, ref) < 0;
    });
    return new Tree(this.parent, this.key, this.level, children);
  };

  Tree.prototype.randomChild = function() {
    return randomChoice(this.children);
  };

  Tree.prototype.randomLeaf = function() {
    var leaf;
    leaf = this.randomChild();
    if (leaf.isLeaf()) {
      return leaf;
    } else {
      return leaf.randomLeaf();
    }
  };

  Tree.prototype.isLeaf = function() {
    return this.children.length === 0;
  };

  Tree.prototype.allLeaves = function() {
    var all_leaves, child, i, len, ref;
    all_leaves = [];
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.isLeaf()) {
        all_leaves.push(child);
      } else {
        all_leaves = all_leaves.concat(child.allLeaves());
      }
    }
    return all_leaves;
  };

  return Tree;

})();

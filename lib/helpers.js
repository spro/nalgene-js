// Generated by CoffeeScript 1.12.7
var fixCapitalization, fixPunctuation, flatten, print, util,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

util = require('util');

exports.flatten = function(ls) {
  var flat, i, j, k, l, len, len1;
  flat = [];
  for (j = 0, len = ls.length; j < len; j++) {
    l = ls[j];
    for (k = 0, len1 = l.length; k < len1; k++) {
      i = l[k];
      flat.push(i);
    }
  }
  return flat;
};

exports.randomChoice = function(l) {
  return l[Math.floor(Math.random() * l.length)];
};

exports.capitalize = function(s) {
  if (s.length) {
    return s[0].toUpperCase() + s.slice(1);
  } else {
    return '';
  }
};

exports.countIndentation = function(s) {
  var c, i, j, len, ref;
  i = 0;
  ref = s.split('');
  for (j = 0, len = ref.length; j < len; j++) {
    c = ref[j];
    if (c === ' ') {
      i += 1;
    } else {
      break;
    }
  }
  s = s.slice(i);
  return [i / 4, s];
};

exports.isALine = function(arg) {
  var i, s;
  i = arg[0], s = arg[1];
  return s.length > 0;
};

exports.splitToken = function(token) {
  return token.split('|');
};

exports.fixCapitalization = fixCapitalization = function(s) {
  return s = s.split(/([.!?] )/).map(exports.capitalize).join('');
};

exports.fixPunctuation = fixPunctuation = function(s) {
  var ref;
  s = s.trim().replace(/\s+/g, ' ');
  s = s.replace(/\ ([,.!?])/g, '$1');
  if (ref = s[-1], indexOf.call('.!?', ref) < 0) {
    s += '.';
  }
  return s;
};

exports.flatten = flatten = function(l) {
  var flat, i, j, len;
  flat = '';
  for (j = 0, len = l.length; j < len; j++) {
    i = l[j];
    if (Array.isArray(i)) {
      flat += flatten(i);
    } else {
      flat += i + ' ';
    }
  }
  return flat;
};

exports.asSentence = function(tokens) {
  return fixCapitalization(fixPunctuation(flatten(tokens)));
};

exports.inspect = function(o) {
  return util.inspect(o, {
    colors: true,
    depth: null
  });
};

print = function() {
  var o, o_string;
  o = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  if (o.length > 1) {
    if (typeof o[0] === 'string') {
      console.log("[" + o[0] + "]");
      o.shift();
    }
    o_string = o.map(exports.inspect).join('\n    ');
  } else {
    o_string = exports.inspect(o[0]);
  }
  return console.log('    ' + o_string);
};
